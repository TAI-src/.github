---
title: "MCO Book 3d example"
format:
  html:
    code-fold: true
jupyter: python3
---

Scalarisation example

```{python}
#| label: fig-scale
#| fig-cap: "Scalarisation 3d example"

# x and y given as array_like objects
import plotly.graph_objects as go
import numpy as np

fig = go.Figure()

points = [(x, 1/x**2) for x in range(1,4)]
points += [(x, 1/x**2) for x in [1.2,1.5]]
points += [(x-0.2, 1/(x-0.5)**2-0.05) for x in [2]]
px = [x for x,y in points]
py = [y for x,y in points]
fig.add_trace(
  go.Scatter3d(visible=True, x=px, y=py, z=[0]*len(px), mode="markers")
)
s = 0.75
for x in np.arange(1, 3, 0.1):
  y = 1/x**2
  grad = -2/x**3
  d = x-s
  tx = [x-d, x-y/grad]
  ty = [y-d*grad, 0]
  fig.add_trace(
    go.Scatter3d(visible=False, x=tx, y=ty, z=[0]*len(tx))
  )
fig.data[1].visible = True

# create and add slider
steps = []
for i in range(1, len(fig.data)):
  step = dict(
    method="update",
    args = [{"visible": [False]*len(fig.data)}]
  )
  step["args"][0]["visible"][i] = True
  step["args"][0]["visible"][0] = True
  steps.append(step)

sliders = [dict(
    active=1,
    currentvalue={"prefix": "Frequency: "},
    pad={"t": 50},
    steps=steps
)]

fig.update_layout(
    sliders=sliders
)
#fig["layout"]["xaxis"].update(autorange=False)
#fig["layout"]["yaxis"].update(autorange=False)

fig.show()
```

