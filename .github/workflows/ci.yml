on:
  workflow_call:
    inputs:
      docker-service:
        required: true
        type: string
      lint-src:
        required: true
        type: string
      pretty:
        required: false
        type: boolean
        default: true
      from-scratch:
        required: false
        type: boolean
        default: false

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: 'true'
      - name: Set up Docker Buildx
        if: ${{ !inputs.from-scratch }}
        uses: docker/setup-buildx-action@v3
      - name: Set up build cache folder
        if: ${{ !inputs.from-scratch }}
        run: mkdir -p /tmp/.buildx-cache
      - name: Cache Docker layers
        if: ${{ !inputs.from-scratch }}
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Prepare docker folder
        run: |
          ls -l
          cd docker
          touch .env      
      - name: Build environment from cache
        if: ${{ !inputs.from-scratch }}
        run: |
          docker buildx create --use --name builder || true
          docker buildx inspect --bootstrap
          docker compose build ${{ inputs.docker-service }}
      - name: Build all docker images from scratch
        if: ${{ inputs.from-scratch }}
        run: |
          DOCKER_BUILDKIT=0 docker compose build --no-cache
      - name: Start docker containers
        run: |
          docker compose up ${{ inputs.docker-service }}
      - name: Test with pytest
        timeout-minutes: 5
        run: |
          docker compose -f docker/docker-compose.yml run ${{ inputs.docker-service }} bash -c "pip install pytest; python -m pytest -v -s --color=yes"
          
  formatting:
    if: ${{ inputs.pretty }}
    runs-on: ubuntu-latest
    env:
      BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository and create PR
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Check files using the black formatter
        uses: rickstaa/action-black@v1
        id: action_black
        with:
          black_args: ". -t py37 -t py312"
      - name: Create Pull Request
        if: steps.action_black.outputs.is_formatted == 'true'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "${{ env.BRANCH_NAME }} Format Python code with psf/black push"
          commit-message: ":art: Format Python code with psf/black"
          body: |
            There appear to be some python formatting errors in ${{ github.sha }}. This pull request
            uses the [psf/black](https://github.com/psf/black) formatter to fix these issues.
          base: ${{ github.head_ref }} # Creates pull request onto pull request or commit branch
          branch: black/${{ env.BRANCH_NAME }}
      - name: Fail job if not formatted
        if: steps.action_black.outputs.is_formatted == 'true'
        run: |
          echo "Needs formatting. Merge black PR"
          exit 1          

  linting:
    if: ${{ inputs.pretty }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Python Linter
        uses: sunnysid3up/python-linter@master
        with:
          source: ${{ inputs.lint-src }}
          strict: "low"
          pylint-options: "--disable=W0511" #Disables (fix-me) generated from #TODOs
          mypy-options: "--ignore-missing-imports --show-error-codes"
